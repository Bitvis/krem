

'''
# Copyright (C) 2018  Bitvis AS
#
# This file is part of KREM.
#
# KREM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KREM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KREM.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Bitvis AS 
# www.bitvis.no
# info@bitvis.no
'''


'''
description:
    Initializes a new KREM project, task, job, etc... 
        in the current KREM project dir
'''
import argparse
import os

from krempack.common import kremtree
from krempack.core.commands import init
from krempack.common import constants as c
from krempack.core import plugin
from krempack.core import cli_plugin

plugin_handler = plugin.PluginHandler('cli')
plugins_initialized = False

def readArgs():
    global plugins_initialized
    parser = argparse.ArgumentParser(description=
                                    "KREM initialization: \n"
                                    "Initializes a new target (KREM project (default), task or job)\n",
                                    prog='krem init')
    # Add arguments here
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-p", "--project", default=None, const=os.getcwd(), nargs='?', help="Initialize new KREM project directory. Initialize in current directory, or prepended argument with relative path to target directory")
    group.add_argument("-t", "--task", nargs=1, help="Initialize new task with given name")
    group.add_argument("-j", "--job", nargs=1, help="Initialize new job with given name")

    if plugins_initialized:
        plugin_handler.execute_hook("cli_init_setup_arguments", {"parser": parser})

    args = parser.parse_args()

    return args


if __name__ == '__main__':
    deploy_arg = False

    if kremtree.find_krem_root(os.getcwd()):
        plugins_initialized = cli_plugin.setup_cli_plugins(plugin_handler)

    args = readArgs()

    if plugins_initialized:
        plugin_handler.execute_hook("cli_init_execute_arguments_pre_cmd", {"args": args})

    if args.project is not None:
        template = c.TEMPLATE_PROJECT
        target = args.project
        deploy_arg = True
    elif args.task is not None:
        template = c.TEMPLATE_TASK
        target = args.task[0]
        deploy_arg = True
    elif args.job is not None:
        template = c.TEMPLATE_JOB
        target = args.job[0]
        deploy_arg = True

    if deploy_arg:
        init.deploy_template(template,target)

    if plugins_initialized:
        plugin_handler.execute_hook("cli_init_execute_arguments_post_cmd", {"args": args})


